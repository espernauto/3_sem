#define _GNU_SOURCE
#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>

int flag = 0;

int read_file(char** str)
{
    const int symb = 15000000;
    int desc = open("file.txt", O_RDONLY);
    char* string = malloc(symb*sizeof(char));
    int byte = read(desc, string, symb);
    string = realloc(string, byte);
    *str = string;
    close(desc);
    return byte;
}

void write_file(char* string, int sizestr)
{
    int desc = open("copy.txt", O_WRONLY | O_CREAT, 0644);
    write(desc, string, sizestr);
    close(desc);
}

void sigp(int signa)
{
    flag = 1;
    printf("Received: SIGUSR1\n");
}

void sigch(int signa)
{
    static char* str = NULL;
    if(!str)
        str = calloc(15000000, sizeof(char));
    static int bit = 0;
    switch(signa)
    {
            case(SIGUSR1):{
            if (str[bit/8] & (1 << (bit % 8)))
            {
                printf("%s\n", str);
                write_file(str, bit/8);
                exit(0);
            }
            str[bit/8] |= 1 << (bit % 8);
            printf("SIGUSR1 received\n");
            break;
            }
    case(SIGUSR2):
    {
            bit++;
            printf("SIGUSR2 received\n");
            break;
    }
    kill(getppid(), SIGUSR1);

    }
}

void waitch()
{
    while (flag == 0)
        usleep(1);
    flag = 0;
}

int main()
{
    char* str;
    signal(SIGUSR1, sigch);
    signal(SIGUSR2, sigch);
    int pid = fork();
    if (pid)
    {
        signal(SIGUSR1, sigp);
        int bytes = read_file(&str);
        for (int i = 0; i < bytes*8; i++)
        {
            if (str[i/8] & (1 << (i % 8)))
            {
                kill(pid, SIGUSR1);
                waitch();
                kill(pid, SIGUSR2);
                waitch();
            }
            else
            {
                kill(pid, SIGUSR2);
                waitch();
            }
        }
        kill(pid, SIGUSR1);
        waitch();
        kill(pid, SIGUSR1);
    }
    else
    {
        while(1)
            sleep(1);
    }
    return 0;
}
