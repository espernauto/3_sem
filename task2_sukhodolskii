#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>


typedef struct {
int txd[2];
int rxd[2];
} dpipe_t;

int main(){

dpipe_t desc;
char bufer[4096];
int size;
while(1)
{

size = read(0, bufer, sizeof(bufer)-1);
bufer[size]=0;

if(pipe(desc.txd) < 0)
{
printf("Opening error");
exit(-1);
}

if(pipe(desc.rxd) < 0)
{
printf("Opening error");
exit(-1);
}

const pid_t pid = fork();

if (pid < 0) {
printf("Fork error\n");
return -1;
}

if(pid)
{
close(desc.txd[0]);
close(desc.rxd[1]);

write(desc.txd[1], bufer, size);

if (strncmp(bufer, "exit", 4) == 0)
return 0;

int status;
waitpid(pid, &status, 0);

size = read(0, buf, sizeof(bufer)-1);
bufer[size]='\0';

close(desc.txd[0]);
close(desc.rxd[1]);
}

else
{
    close(desc.txd[1]);
    close(desc.rxd[0]);
    size=read(desc.rxd[0], bufer, sizeof(bufer)-1);
    bufer[size] = '\0';
    close(desc.rxd[0]);
    close(desc.txd[1]);
}

if (strncmp(bufer, "exit", 4) == 0)
{
close(desc.rxd[1]);
close(desc.txd[0]);
close(desc.rxd[0]);
close(desc.txd[1]);
return 0;
}
    write(desc.rxd[1], bufer, sizeof(bufer));
    close(desc.rxd[1]);
    close(desc.txd[0]);
    exit(0);

    }
  return 0;
}
